{
  "info": {
    "name": "附件目录模板API测试集合",
    "description": "包含附件目录模板相关接口的测试用例",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://api.company.com",
      "type": "string"
    },
    {
      "key": "token",
      "value": "your-bearer-token-here",
      "type": "string"
    },
    {
      "key": "rootTemplateId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "创建分类模板接口",
      "item": [
        {
          "name": "1.1 创建根级模板",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateName\": \"测试根级模板\",\n  \"description\": \"这是一个测试用的根级模板\",\n  \"tags\": [\"测试\", \"根级\"],\n  \"attachReceiveType\": 1,\n  \"workflowConfig\": \"{\\\"workflowKey\\\":\\\"test_workflow\\\",\\\"timeout\\\":3600}\",\n  \"isRequired\": true,\n  \"sequenceNumber\": 100,\n  \"isStatic\": false,\n  \"facetType\": 0,\n  \"templatePurpose\": 1,\n  \"permissions\": [],\n  \"metaFields\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"响应包含模板ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.not.be.null;",
                  "    pm.collectionVariables.set(\"rootTemplateId\", jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"模板路径自动生成\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.templatePath).to.not.be.null;",
                  "});",
                  "",
                  "pm.test(\"父模板ID为空\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.parentId).to.be.null;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.2 创建子级模板",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateName\": \"测试子级模板\",\n  \"description\": \"这是一个测试用的子级模板\",\n  \"tags\": [\"测试\", \"子级\"],\n  \"attachReceiveType\": 1,\n  \"workflowConfig\": \"{\\\"workflowKey\\\":\\\"child_workflow\\\",\\\"timeout\\\":1800}\",\n  \"isRequired\": true,\n  \"sequenceNumber\": 200,\n  \"isStatic\": false,\n  \"parentId\": \"{{rootTemplateId}}\",\n  \"facetType\": 0,\n  \"templatePurpose\": 1,\n  \"permissions\": [],\n  \"metaFields\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"响应包含模板ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.not.be.null;",
                  "});",
                  "",
                  "pm.test(\"父模板ID正确\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.parentId).to.eql(pm.collectionVariables.get(\"rootTemplateId\"));",
                  "});",
                  "",
                  "pm.test(\"模板路径包含父路径\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.templatePath).to.include(\".\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.3 创建带元数据字段的模板",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateName\": \"带元数据字段的模板\",\n  \"description\": \"包含多个元数据字段的测试模板\",\n  \"tags\": [\"测试\", \"元数据\"],\n  \"attachReceiveType\": 1,\n  \"workflowConfig\": \"{\\\"workflowKey\\\":\\\"meta_workflow\\\",\\\"timeout\\\":3600}\",\n  \"isRequired\": true,\n  \"sequenceNumber\": 300,\n  \"isStatic\": false,\n  \"facetType\": 0,\n  \"templatePurpose\": 1,\n  \"permissions\": [],\n  \"metaFields\": [\n    {\n      \"fieldName\": \"contractType\",\n      \"fieldType\": \"string\",\n      \"isRequired\": true,\n      \"defaultValue\": \"服务合同\"\n    },\n    {\n      \"fieldName\": \"contractAmount\",\n      \"fieldType\": \"decimal\",\n      \"isRequired\": true,\n      \"defaultValue\": \"0.00\"\n    },\n    {\n      \"fieldName\": \"signDate\",\n      \"fieldType\": \"datetime\",\n      \"isRequired\": false,\n      \"defaultValue\": null\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"元数据字段数量正确\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.metaFields).to.have.lengthOf(3);",
                  "});",
                  "",
                  "pm.test(\"元数据字段类型正确\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.metaFields[0].fieldType).to.eql(\"string\");",
                  "    pm.expect(jsonData.metaFields[1].fieldType).to.eql(\"decimal\");",
                  "    pm.expect(jsonData.metaFields[2].fieldType).to.eql(\"datetime\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.4 创建带权限的模板",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateName\": \"带权限的模板\",\n  \"description\": \"包含权限配置的测试模板\",\n  \"tags\": [\"测试\", \"权限\"],\n  \"attachReceiveType\": 1,\n  \"workflowConfig\": \"{\\\"workflowKey\\\":\\\"permission_workflow\\\",\\\"timeout\\\":3600}\",\n  \"isRequired\": true,\n  \"sequenceNumber\": 400,\n  \"isStatic\": false,\n  \"facetType\": 0,\n  \"templatePurpose\": 1,\n  \"permissions\": [\n    {\n      \"userId\": \"user123\",\n      \"permission\": \"read\"\n    },\n    {\n      \"userId\": \"user456\",\n      \"permission\": \"write\"\n    }\n  ],\n  \"metaFields\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"权限配置数量正确\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.permissions).to.have.lengthOf(2);",
                  "});",
                  "",
                  "pm.test(\"权限配置正确\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.permissions[0].userId).to.eql(\"user123\");",
                  "    pm.expect(jsonData.permissions[0].permission).to.eql(\"read\");",
                  "    pm.expect(jsonData.permissions[1].userId).to.eql(\"user456\");",
                  "    pm.expect(jsonData.permissions[1].permission).to.eql(\"write\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.5.1 必填字段验证测试",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"缺少必填字段的测试\",\n  \"tags\": [\"测试\"],\n  \"attachReceiveType\": 1,\n  \"isRequired\": true,\n  \"sequenceNumber\": 500,\n  \"isStatic\": false,\n  \"facetType\": 0,\n  \"templatePurpose\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"错误信息包含必填字段提示\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include(\"必填\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.5.2 字段长度验证测试",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateName\": \"这是一个非常长的模板名称，超过了系统允许的最大长度限制，应该会触发验证错误\",\n  \"description\": \"测试描述\",\n  \"tags\": [\"测试\"],\n  \"attachReceiveType\": 1,\n  \"isRequired\": true,\n  \"sequenceNumber\": 600,\n  \"isStatic\": false,\n  \"facetType\": 0,\n  \"templatePurpose\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"错误信息包含长度限制提示\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include(\"长度\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.5.3 枚举值验证测试",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateName\": \"枚举值测试\",\n  \"description\": \"测试枚举值验证\",\n  \"tags\": [\"测试\"],\n  \"attachReceiveType\": 999,\n  \"isRequired\": true,\n  \"sequenceNumber\": 700,\n  \"isStatic\": false,\n  \"facetType\": 999,\n  \"templatePurpose\": 999\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"错误信息包含枚举值验证提示\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include(\"枚举\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.6.1 有效的工作流配置测试",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateName\": \"有效工作流配置测试\",\n  \"description\": \"测试有效的工作流配置\",\n  \"tags\": [\"测试\", \"工作流\"],\n  \"attachReceiveType\": 1,\n  \"workflowConfig\": \"{\\\"workflowKey\\\":\\\"valid_workflow\\\",\\\"timeout\\\":3600,\\\"skipApprovers\\\":[\\\"admin\\\"],\\\"scripts\\\":[\\\"script1.js\\\"],\\\"webhooks\\\":[\\\"https://api.example.com/webhook\\\"]}\",\n  \"isRequired\": true,\n  \"sequenceNumber\": 800,\n  \"isStatic\": false,\n  \"facetType\": 0,\n  \"templatePurpose\": 1,\n  \"permissions\": [],\n  \"metaFields\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"工作流配置正确保存\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.workflowConfig).to.not.be.null;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "1.6.2 无效的工作流配置测试",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"templateName\": \"无效工作流配置测试\",\n  \"description\": \"测试无效的工作流配置\",\n  \"tags\": [\"测试\", \"工作流\"],\n  \"attachReceiveType\": 1,\n  \"workflowConfig\": \"{\\\"workflowKey\\\":\\\"invalid_workflow\\\",\\\"timeout\\\":\\\"invalid_timeout\\\"}\",\n  \"isRequired\": true,\n  \"sequenceNumber\": 900,\n  \"isStatic\": false,\n  \"facetType\": 0,\n  \"templatePurpose\": 1,\n  \"permissions\": [],\n  \"metaFields\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"错误信息包含工作流配置验证提示\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include(\"工作流\");",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "获取根节点模板接口",
      "item": [
        {
          "name": "2.1 获取所有根级模板",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots?includeChildren=true&onlyLatest=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"],
              "query": [
                {
                  "key": "includeChildren",
                  "value": "true"
                },
                {
                  "key": "onlyLatest",
                  "value": "true"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"响应包含items数组\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.items).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"所有模板都是根级模板\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.items.forEach(item => {",
                  "        pm.expect(item.parentId).to.be.null;",
                  "    });",
                  "});",
                  "",
                  "pm.test(\"响应时间小于2秒\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.2 获取特定类型的根级模板",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots?facetType=0&templatePurpose=1&includeChildren=true&onlyLatest=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"],
              "query": [
                {
                  "key": "facetType",
                  "value": "0"
                },
                {
                  "key": "templatePurpose",
                  "value": "1"
                },
                {
                  "key": "includeChildren",
                  "value": "true"
                },
                {
                  "key": "onlyLatest",
                  "value": "true"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"所有模板类型正确\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.items.forEach(item => {",
                  "        pm.expect(item.facetType).to.eql(0);",
                  "        pm.expect(item.templatePurpose).to.eql(1);",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.3 获取根级模板概览",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots?includeChildren=false&onlyLatest=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"],
              "query": [
                {
                  "key": "includeChildren",
                  "value": "false"
                },
                {
                  "key": "onlyLatest",
                  "value": "true"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"所有模板的children为空\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    jsonData.items.forEach(item => {",
                  "        pm.expect(item.children).to.be.an('array').that.is.empty;",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.4 获取所有版本（包括历史版本）",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots?includeChildren=true&onlyLatest=false",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"],
              "query": [
                {
                  "key": "includeChildren",
                  "value": "true"
                },
                {
                  "key": "onlyLatest",
                  "value": "false"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"响应包含items数组\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.items).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.5 空结果测试",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots?facetType=999&templatePurpose=999&includeChildren=true&onlyLatest=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"],
              "query": [
                {
                  "key": "facetType",
                  "value": "999"
                },
                {
                  "key": "templatePurpose",
                  "value": "999"
                },
                {
                  "key": "includeChildren",
                  "value": "true"
                },
                {
                  "key": "onlyLatest",
                  "value": "true"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"items数组为空\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.items).to.be.an('array').that.is.empty;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.6.1 布尔参数测试",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots?includeChildren=1&onlyLatest=0",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"],
              "query": [
                {
                  "key": "includeChildren",
                  "value": "1"
                },
                {
                  "key": "onlyLatest",
                  "value": "0"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"参数正确解析\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.items).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2.6.2 枚举参数测试",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots?facetType=1&templatePurpose=2",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"],
              "query": [
                {
                  "key": "facetType",
                  "value": "1"
                },
                {
                  "key": "templatePurpose",
                  "value": "2"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"参数正确解析和过滤\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.items).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "安全测试",
      "item": [
        {
          "name": "4.1 无认证token测试",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"错误信息包含认证失败提示\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include(\"认证\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "4.2 无效认证token测试",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid-token"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/attach-catalogue-template/tree/roots",
              "host": ["{{baseUrl}}"],
              "path": ["api", "attach-catalogue-template", "tree", "roots"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"状态码为401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"错误信息包含认证失败提示\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message).to.include(\"认证\");",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
