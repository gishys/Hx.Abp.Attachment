-- =====================================================
-- 权限系统数据库迁移脚本
-- 实现RBAC + ABAC + PBAC混合模型的权限管理
-- 基于ABP vNext框架，支持权限继承、覆盖、运行时权限检查
-- =====================================================

-- 检查扩展
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

-- =====================================================
-- 1. 创建权限规则表
-- =====================================================
CREATE TABLE IF NOT EXISTS "APPATTACH_PERMISSION_RULES" (
    "ID" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "RULE_TYPE" varchar(50) NOT NULL,
    "RULE_EXPRESSION" text NOT NULL,
    "DESCRIPTION" text,
    "IS_ENABLED" boolean NOT NULL DEFAULT true,
    "PRIORITY" integer NOT NULL DEFAULT 100,
    "CREATION_TIME" timestamp with time zone NOT NULL DEFAULT now(),
    "CREATOR_ID" uuid,
    "LAST_MODIFICATION_TIME" timestamp with time zone,
    "LAST_MODIFIER_ID" uuid,
    "IS_DELETED" boolean NOT NULL DEFAULT false,
    "DELETER_ID" uuid,
    "DELETION_TIME" timestamp with time zone,
    "CONCURRENCY_STAMP" varchar(40),
    "EXTRA_PROPERTIES" jsonb,
    
    CONSTRAINT "PK_APPATTACH_PERMISSION_RULES" PRIMARY KEY ("ID")
);

-- 添加注释
COMMENT ON TABLE "APPATTACH_PERMISSION_RULES" IS '权限规则表 - 存储ABAC和PBAC的规则表达式';
COMMENT ON COLUMN "APPATTACH_PERMISSION_RULES"."RULE_TYPE" IS '规则类型';
COMMENT ON COLUMN "APPATTACH_PERMISSION_RULES"."RULE_EXPRESSION" IS '规则表达式（JSON格式）';
COMMENT ON COLUMN "APPATTACH_PERMISSION_RULES"."PRIORITY" IS '优先级（数字越小优先级越高）';

-- =====================================================
-- 2. 创建附件目录模板权限表
-- =====================================================
CREATE TABLE IF NOT EXISTS "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" (
    "ID" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "TEMPLATE_ID" uuid NOT NULL,
    "TEMPLATE_VERSION" integer NOT NULL,
    "PERMISSION_TYPE" varchar(10) NOT NULL CHECK ("PERMISSION_TYPE" IN ('RBAC', 'ABAC', 'PBAC')),
    "ROLE_NAME" varchar(100),
    "USER_ID" uuid,
    "USER_GROUP_ID" uuid,
    "ACTION" integer NOT NULL,
    "EFFECT" integer NOT NULL CHECK ("EFFECT" IN (1, 2, 3)),
    "ATTRIBUTE_CONDITIONS" jsonb,
    "POLICY_RULES" jsonb,
    "INHERIT_FROM_PARENT" boolean NOT NULL DEFAULT true,
    "INHERITANCE_PRIORITY" integer NOT NULL DEFAULT 100,
    "IS_ENABLED" boolean NOT NULL DEFAULT true,
    "EFFECTIVE_TIME" timestamp with time zone,
    "EXPIRATION_TIME" timestamp with time zone,
    "DESCRIPTION" text,
    "RUNTIME_PERMISSION_CACHE" jsonb,
    "LAST_PERMISSION_CALCULATION_TIME" timestamp with time zone,
    "CREATION_TIME" timestamp with time zone NOT NULL DEFAULT now(),
    "CREATOR_ID" uuid,
    "LAST_MODIFICATION_TIME" timestamp with time zone,
    "LAST_MODIFIER_ID" uuid,
    "IS_DELETED" boolean NOT NULL DEFAULT false,
    "DELETER_ID" uuid,
    "DELETION_TIME" timestamp with time zone,
    "CONCURRENCY_STAMP" varchar(40),
    "EXTRA_PROPERTIES" jsonb,
    
    CONSTRAINT "PK_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" PRIMARY KEY ("ID"),
    CONSTRAINT "CK_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_PERMISSION_TYPE" CHECK ("PERMISSION_TYPE" IN ('RBAC', 'ABAC', 'PBAC')),
    CONSTRAINT "CK_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_EFFECT" CHECK ("EFFECT" IN (1, 2, 3)),
    CONSTRAINT "CK_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_TIME_RANGE" CHECK ("EFFECTIVE_TIME" IS NULL OR "EXPIRATION_TIME" IS NULL OR "EFFECTIVE_TIME" < "EXPIRATION_TIME")
);

-- 添加注释
COMMENT ON TABLE "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" IS '附件目录模板权限表 - 实现RBAC+ABAC+PBAC混合模型的权限管理';
COMMENT ON COLUMN "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"."PERMISSION_TYPE" IS '权限类型（RBAC/ABAC/PBAC）';
COMMENT ON COLUMN "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"."ACTION" IS '权限操作（对应PermissionAction枚举）';
COMMENT ON COLUMN "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"."EFFECT" IS '权限效果（1=允许, 2=拒绝, 3=继承）';
COMMENT ON COLUMN "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"."ATTRIBUTE_CONDITIONS" IS '属性条件（ABAC）- JSONB格式';
COMMENT ON COLUMN "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"."POLICY_RULES" IS '策略规则（PBAC）- JSONB格式';
COMMENT ON COLUMN "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"."RUNTIME_PERMISSION_CACHE" IS '运行时权限缓存（JSONB格式）';

-- =====================================================
-- 3. 创建权限规则关联表
-- =====================================================
CREATE TABLE IF NOT EXISTS "APPATTACH_PERMISSION_RULE_RELATIONS" (
    "ID" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "PERMISSION_ID" uuid NOT NULL,
    "RULE_ID" uuid NOT NULL,
    "CREATION_TIME" timestamp with time zone NOT NULL DEFAULT now(),
    
    CONSTRAINT "PK_APPATTACH_PERMISSION_RULE_RELATIONS" PRIMARY KEY ("ID"),
    CONSTRAINT "FK_APPATTACH_PERMISSION_RULE_RELATIONS_PERMISSION_ID" FOREIGN KEY ("PERMISSION_ID") REFERENCES "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("ID") ON DELETE CASCADE,
    CONSTRAINT "FK_APPATTACH_PERMISSION_RULE_RELATIONS_RULE_ID" FOREIGN KEY ("RULE_ID") REFERENCES "APPATTACH_PERMISSION_RULES" ("ID") ON DELETE CASCADE
);

-- 添加注释
COMMENT ON TABLE "APPATTACH_PERMISSION_RULE_RELATIONS" IS '权限规则关联表 - 建立权限与规则的关联关系';

-- =====================================================
-- 4. 为现有表添加权限相关字段
-- =====================================================

-- 为附件目录模板表添加权限相关字段
DO $$
BEGIN
    -- 添加权限集合字段（JSONB格式，用于存储运行时权限信息）
    IF NOT EXISTS (SELECT FROM information_schema.columns WHERE table_name = 'APPATTACH_CATALOGUE_TEMPLATES' AND column_name = 'PERMISSIONS') THEN
        ALTER TABLE "APPATTACH_CATALOGUE_TEMPLATES" 
        ADD COLUMN "PERMISSIONS" jsonb;
        
        RAISE NOTICE '已添加 PERMISSIONS 字段';
    ELSE
        RAISE NOTICE 'PERMISSIONS 字段已存在';
    END IF;

    -- 添加运行时权限上下文字段
    IF NOT EXISTS (SELECT FROM information_schema.columns WHERE table_name = 'APPATTACH_CATALOGUE_TEMPLATES' AND column_name = 'RUNTIME_PERMISSION_CONTEXT') THEN
        ALTER TABLE "APPATTACH_CATALOGUE_TEMPLATES" 
        ADD COLUMN "RUNTIME_PERMISSION_CONTEXT" jsonb;
        
        RAISE NOTICE '已添加 RUNTIME_PERMISSION_CONTEXT 字段';
    ELSE
        RAISE NOTICE 'RUNTIME_PERMISSION_CONTEXT 字段已存在';
    END IF;
END $$;

-- =====================================================
-- 5. 创建索引
-- =====================================================

-- 权限规则表索引
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_RULES_RULE_TYPE" ON "APPATTACH_PERMISSION_RULES" ("RULE_TYPE");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_RULES_IS_ENABLED" ON "APPATTACH_PERMISSION_RULES" ("IS_ENABLED");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_RULES_PRIORITY" ON "APPATTACH_PERMISSION_RULES" ("PRIORITY");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_RULES_CREATION_TIME" ON "APPATTACH_PERMISSION_RULES" ("CREATION_TIME");

-- 模板权限表索引
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_TEMPLATE_ID" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("TEMPLATE_ID");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_TEMPLATE_VERSION" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("TEMPLATE_VERSION");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_PERMISSION_TYPE" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("PERMISSION_TYPE");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_ACTION" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("ACTION");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_EFFECT" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("EFFECT");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_USER_ID" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("USER_ID");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_ROLE_NAME" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("ROLE_NAME");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_USER_GROUP_ID" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("USER_GROUP_ID");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_IS_ENABLED" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("IS_ENABLED");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_INHERITANCE_PRIORITY" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("INHERITANCE_PRIORITY");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_EFFECTIVE_TIME" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("EFFECTIVE_TIME");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_EXPIRATION_TIME" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("EXPIRATION_TIME");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_CREATION_TIME" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("CREATION_TIME");

-- 权限规则关联表索引
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_RULE_RELATIONS_PERMISSION_ID" ON "APPATTACH_PERMISSION_RULE_RELATIONS" ("PERMISSION_ID");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_RULE_RELATIONS_RULE_ID" ON "APPATTACH_PERMISSION_RULE_RELATIONS" ("RULE_ID");

-- =====================================================
-- 6. 创建GIN索引用于JSONB查询
-- =====================================================

-- 权限规则表的规则表达式GIN索引
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_RULES_RULE_EXPRESSION_GIN" ON "APPATTACH_PERMISSION_RULES" USING GIN ("RULE_EXPRESSION" jsonb_path_ops);

-- 模板权限表的属性条件和策略规则GIN索引
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_ATTRIBUTE_CONDITIONS_GIN" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" USING GIN ("ATTRIBUTE_CONDITIONS" jsonb_path_ops);
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_POLICY_RULES_GIN" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" USING GIN ("POLICY_RULES" jsonb_path_ops);
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_RUNTIME_PERMISSION_CACHE_GIN" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" USING GIN ("RUNTIME_PERMISSION_CACHE" jsonb_path_ops);

-- 现有表的权限字段GIN索引
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_CATALOGUE_TEMPLATES_PERMISSIONS_GIN" ON "APPATTACH_CATALOGUE_TEMPLATES" USING GIN ("PERMISSIONS" jsonb_path_ops);
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_CATALOGUE_TEMPLATES_RUNTIME_PERMISSION_CONTEXT_GIN" ON "APPATTACH_CATALOGUE_TEMPLATES" USING GIN ("RUNTIME_PERMISSION_CONTEXT" jsonb_path_ops);

-- =====================================================
-- 7. 创建复合索引
-- =====================================================

-- 模板权限表的复合索引
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_TEMPLATE_ACTION" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("TEMPLATE_ID", "ACTION");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_TEMPLATE_TYPE_ACTION" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("TEMPLATE_ID", "PERMISSION_TYPE", "ACTION");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_USER_ACTION" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("USER_ID", "ACTION") WHERE "USER_ID" IS NOT NULL;
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_ROLE_ACTION" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("ROLE_NAME", "ACTION") WHERE "ROLE_NAME" IS NOT NULL;
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_GROUP_ACTION" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" ("USER_GROUP_ID", "ACTION") WHERE "USER_GROUP_ID" IS NOT NULL;

-- =====================================================
-- 8. 创建视图
-- =====================================================

-- 创建权限摘要视图
CREATE OR REPLACE VIEW "V_APPATTACH_PERMISSION_SUMMARY" AS
SELECT 
    p."TEMPLATE_ID",
    p."TEMPLATE_VERSION",
    p."PERMISSION_TYPE",
    p."ACTION",
    p."EFFECT",
    p."ROLE_NAME",
    p."USER_ID",
    p."USER_GROUP_ID",
    p."IS_ENABLED",
    p."INHERITANCE_PRIORITY",
    p."EFFECTIVE_TIME",
    p."EXPIRATION_TIME",
    p."CREATION_TIME",
    p."CREATOR_ID",
    CASE 
        WHEN p."EFFECTIVE_TIME" IS NULL AND p."EXPIRATION_TIME" IS NULL THEN true
        WHEN p."EFFECTIVE_TIME" IS NULL AND p."EXPIRATION_TIME" > now() THEN true
        WHEN p."EFFECTIVE_TIME" < now() AND p."EXPIRATION_TIME" IS NULL THEN true
        WHEN p."EFFECTIVE_TIME" < now() AND p."EXPIRATION_TIME" > now() THEN true
        ELSE false
    END AS "IS_EFFECTIVE",
    CASE 
        WHEN p."PERMISSION_TYPE" = 'RBAC' AND p."ROLE_NAME" IS NOT NULL THEN 'Role: ' || p."ROLE_NAME"
        WHEN p."PERMISSION_TYPE" = 'RBAC' AND p."USER_ID" IS NOT NULL THEN 'User: ' || p."USER_ID"::text
        WHEN p."PERMISSION_TYPE" = 'RBAC' AND p."USER_GROUP_ID" IS NOT NULL THEN 'Group: ' || p."USER_GROUP_ID"::text
        WHEN p."PERMISSION_TYPE" = 'ABAC' THEN 'Attribute-based'
        WHEN p."PERMISSION_TYPE" = 'PBAC' THEN 'Policy-based'
        ELSE 'Unknown'
    END AS "PERMISSION_SUMMARY"
FROM "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" p
WHERE p."IS_DELETED" = false;

-- 添加视图注释
COMMENT ON VIEW "V_APPATTACH_PERMISSION_SUMMARY" IS '权限摘要视图 - 提供权限信息的汇总和计算字段';

-- 创建权限统计视图
CREATE OR REPLACE VIEW "V_APPATTACH_PERMISSION_STATISTICS" AS
SELECT 
    t."ID" AS "TEMPLATE_ID",
    t."TEMPLATE_NAME",
    t."TEMPLATE_TYPE",
    t."TEMPLATE_PURPOSE",
    COUNT(p."ID") AS "TOTAL_PERMISSIONS",
    COUNT(CASE WHEN p."IS_ENABLED" = true THEN 1 END) AS "ENABLED_PERMISSIONS",
    COUNT(CASE WHEN p."IS_ENABLED" = false THEN 1 END) AS "DISABLED_PERMISSIONS",
    COUNT(CASE WHEN p."PERMISSION_TYPE" = 'RBAC' THEN 1 END) AS "RBAC_PERMISSIONS",
    COUNT(CASE WHEN p."PERMISSION_TYPE" = 'ABAC' THEN 1 END) AS "ABAC_PERMISSIONS",
    COUNT(CASE WHEN p."PERMISSION_TYPE" = 'PBAC' THEN 1 END) AS "PBAC_PERMISSIONS",
    COUNT(CASE WHEN p."EFFECT" = 1 THEN 1 END) AS "ALLOW_PERMISSIONS",
    COUNT(CASE WHEN p."EFFECT" = 2 THEN 1 END) AS "DENY_PERMISSIONS",
    COUNT(CASE WHEN p."EFFECT" = 3 THEN 1 END) AS "INHERIT_PERMISSIONS",
    MAX(p."CREATION_TIME") AS "LAST_PERMISSION_ADDED",
    MAX(p."LAST_MODIFICATION_TIME") AS "LAST_PERMISSION_MODIFIED"
FROM "APPATTACH_CATALOGUE_TEMPLATES" t
LEFT JOIN "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" p ON t."ID" = p."TEMPLATE_ID" AND p."IS_DELETED" = false
WHERE t."IS_DELETED" = false
GROUP BY t."ID", t."TEMPLATE_NAME", t."TEMPLATE_TYPE", t."TEMPLATE_PURPOSE";

-- 添加统计视图注释
COMMENT ON VIEW "V_APPATTACH_PERMISSION_STATISTICS" IS '权限统计视图 - 提供模板权限的统计信息';

-- 创建权限分析视图
CREATE OR REPLACE VIEW "V_APPATTACH_PERMISSION_ANALYSIS" AS
SELECT 
    t."ID" AS "TEMPLATE_ID",
    t."TEMPLATE_NAME",
    t."TEMPLATE_TYPE",
    t."TEMPLATE_PURPOSE",
    t."VERSION",
    t."CREATION_TIME",
    t."LAST_MODIFICATION_TIME",
    CASE 
        WHEN t."PERMISSIONS" IS NOT NULL THEN '已配置权限'
        ELSE '未配置权限'
    END AS "PERMISSION_STATUS"
FROM "APPATTACH_CATALOGUE_TEMPLATES" t
WHERE t."IS_DELETED" = false;

-- 添加分析视图注释
COMMENT ON VIEW "V_APPATTACH_PERMISSION_ANALYSIS" IS '权限分析视图 - 提供模板权限的分析信息';

-- =====================================================
-- 9. 创建函数
-- =====================================================

-- 创建权限检查函数
CREATE OR REPLACE FUNCTION "FN_CHECK_USER_PERMISSION"(
    p_user_id uuid,
    p_template_id uuid,
    p_action integer
)
RETURNS boolean
LANGUAGE plpgsql
AS $$
DECLARE
    v_has_permission boolean := false;
    v_permission_record record;
BEGIN
    -- 检查直接权限
    SELECT * INTO v_permission_record
    FROM "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"
    WHERE "TEMPLATE_ID" = p_template_id
      AND "ACTION" = p_action
      AND "IS_ENABLED" = true
      AND "IS_DELETED" = false
      AND (
          "USER_ID" = p_user_id OR
          "ROLE_NAME" IN (
              SELECT DISTINCT unnest(roles)::text
              FROM jsonb_array_elements_text(
                  COALESCE(
                      (SELECT "RUNTIME_PERMISSION_CONTEXT"->'userRoles'
                       FROM "APPATTACH_CATALOGUE_TEMPLATES"
                       WHERE "ID" = p_template_id), 
                      '[]'::jsonb
                  )
              ) AS roles
          ) OR
          "USER_GROUP_ID" IN (
              SELECT DISTINCT unnest(groups)::uuid
              FROM jsonb_array_elements_text(
                  COALESCE(
                      (SELECT "RUNTIME_PERMISSION_CONTEXT"->'userGroups'
                       FROM "APPATTACH_CATALOGUE_TEMPLATES"
                       WHERE "ID" = p_template_id), 
                      '[]'::jsonb
                  )
              ) AS groups
          )
      )
      AND (
          "EFFECTIVE_TIME" IS NULL OR "EFFECTIVE_TIME" <= now()
      )
      AND (
          "EXPIRATION_TIME" IS NULL OR "EXPIRATION_TIME" > now()
      )
    ORDER BY "INHERITANCE_PRIORITY" ASC
    LIMIT 1;

    IF v_permission_record IS NOT NULL THEN
        v_has_permission := (v_permission_record."EFFECT" = 1); -- 1 = Allow
    END IF;

    RETURN v_has_permission;
END;
$$;

-- 添加函数注释
COMMENT ON FUNCTION "FN_CHECK_USER_PERMISSION" IS '权限检查函数 - 检查用户是否具有指定模板的指定权限';

-- 创建权限状态查询函数
CREATE OR REPLACE FUNCTION "FN_GET_TEMPLATE_PERMISSION_COUNT"(
    p_template_id uuid
)
RETURNS integer
LANGUAGE plpgsql
AS $$
DECLARE
    v_permission_count integer := 0;
BEGIN
    -- 通过关联查询获取权限数量
    SELECT COUNT(*) INTO v_permission_count
    FROM "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS" tp
    WHERE tp."TEMPLATE_ID" = p_template_id 
      AND tp."IS_DELETED" = false;
    
    RETURN COALESCE(v_permission_count, 0);
END;
$$;

-- 添加函数注释
COMMENT ON FUNCTION "FN_GET_TEMPLATE_PERMISSION_COUNT" IS '获取模板权限数量函数';

-- =====================================================
-- 10. 创建触发器
-- =====================================================

-- 创建权限变更审计触发器
CREATE OR REPLACE FUNCTION "FN_AUDIT_PERMISSION_CHANGES"()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- 记录权限创建
        INSERT INTO "APPATTACH_PERMISSION_AUDIT_LOGS" (
            "PERMISSION_ID",
            "TEMPLATE_ID",
            "ACTION_TYPE",
            "OLD_VALUES",
            "NEW_VALUES",
            "CHANGED_BY",
            "CHANGE_TIME"
        ) VALUES (
            NEW."ID",
            NEW."TEMPLATE_ID",
            'INSERT',
            NULL,
            to_jsonb(NEW),
            NEW."CREATOR_ID",
            NEW."CREATION_TIME"
        );
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        -- 记录权限更新
        INSERT INTO "APPATTACH_PERMISSION_AUDIT_LOGS" (
            "PERMISSION_ID",
            "TEMPLATE_ID",
            "ACTION_TYPE",
            "OLD_VALUES",
            "NEW_VALUES",
            "CHANGED_BY",
            "CHANGE_TIME"
        ) VALUES (
            NEW."ID",
            NEW."TEMPLATE_ID",
            'UPDATE',
            to_jsonb(OLD),
            to_jsonb(NEW),
            NEW."LAST_MODIFIER_ID",
            NEW."LAST_MODIFICATION_TIME"
        );
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        -- 记录权限删除
        INSERT INTO "APPATTACH_PERMISSION_AUDIT_LOGS" (
            "PERMISSION_ID",
            "TEMPLATE_ID",
            "ACTION_TYPE",
            "OLD_VALUES",
            "NEW_VALUES",
            "CHANGED_BY",
            "CHANGE_TIME"
        ) VALUES (
            OLD."ID",
            OLD."TEMPLATE_ID",
            'DELETE',
            to_jsonb(OLD),
            NULL,
            OLD."DELETER_ID",
            OLD."DELETION_TIME"
        );
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$;

-- 添加触发器函数注释
COMMENT ON FUNCTION "FN_AUDIT_PERMISSION_CHANGES" IS '权限变更审计触发器函数 - 记录权限的创建、更新、删除操作';

-- 创建权限变更审计表
CREATE TABLE IF NOT EXISTS "APPATTACH_PERMISSION_AUDIT_LOGS" (
    "ID" uuid NOT NULL DEFAULT uuid_generate_v4(),
    "PERMISSION_ID" uuid NOT NULL,
    "TEMPLATE_ID" uuid NOT NULL,
    "ACTION_TYPE" varchar(20) NOT NULL CHECK ("ACTION_TYPE" IN ('INSERT', 'UPDATE', 'DELETE')),
    "OLD_VALUES" jsonb,
    "NEW_VALUES" jsonb,
    "CHANGED_BY" uuid,
    "CHANGE_TIME" timestamp with time zone NOT NULL DEFAULT now(),
    
    CONSTRAINT "PK_APPATTACH_PERMISSION_AUDIT_LOGS" PRIMARY KEY ("ID")
);

-- 添加审计表注释
COMMENT ON TABLE "APPATTACH_PERMISSION_AUDIT_LOGS" IS '权限审计日志表 - 记录权限的变更历史';

-- 创建审计表索引
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_AUDIT_LOGS_PERMISSION_ID" ON "APPATTACH_PERMISSION_AUDIT_LOGS" ("PERMISSION_ID");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_AUDIT_LOGS_TEMPLATE_ID" ON "APPATTACH_PERMISSION_AUDIT_LOGS" ("TEMPLATE_ID");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_AUDIT_LOGS_ACTION_TYPE" ON "APPATTACH_PERMISSION_AUDIT_LOGS" ("ACTION_TYPE");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_AUDIT_LOGS_CHANGE_TIME" ON "APPATTACH_PERMISSION_AUDIT_LOGS" ("CHANGE_TIME");
CREATE INDEX IF NOT EXISTS "IX_APPATTACH_PERMISSION_AUDIT_LOGS_CHANGED_BY" ON "APPATTACH_PERMISSION_AUDIT_LOGS" ("CHANGED_BY");

-- 为权限表添加审计触发器
DROP TRIGGER IF EXISTS "TR_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_AUDIT" ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS";

CREATE TRIGGER "TR_APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS_AUDIT"
    AFTER INSERT OR UPDATE OR DELETE ON "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"
    FOR EACH ROW EXECUTE FUNCTION "FN_AUDIT_PERMISSION_CHANGES"();

-- =====================================================
-- 11. 插入示例数据
-- =====================================================

-- 插入示例权限规则
INSERT INTO "APPATTACH_PERMISSION_RULES" ("ID", "RULE_TYPE", "RULE_EXPRESSION", "DESCRIPTION", "PRIORITY") VALUES
(uuid_generate_v4(), 'TimeBased', '{"condition": "time", "startTime": "09:00", "endTime": "18:00", "timezone": "UTC+8"}', '工作时间权限规则', 10),
(uuid_generate_v4(), 'LocationBased', '{"condition": "location", "allowedIPs": ["192.168.1.0/24", "10.0.0.0/8"]}', '内网访问权限规则', 20),
(uuid_generate_v4(), 'RoleBased', '{"condition": "role", "requiredRoles": ["Admin", "Manager"]}', '管理角色权限规则', 30)
ON CONFLICT DO NOTHING;

-- =====================================================
-- 12. 创建权限管理存储过程
-- =====================================================

-- 创建权限继承计算存储过程
CREATE OR REPLACE PROCEDURE "SP_CALCULATE_INHERITED_PERMISSIONS"(
    p_template_id uuid
)
LANGUAGE plpgsql
AS $$
DECLARE
    v_parent_id uuid;
    v_inherited_permissions jsonb := '[]'::jsonb;
    v_permission_record record;
BEGIN
    -- 获取父模板ID
    SELECT "PARENT_ID" INTO v_parent_id
    FROM "APPATTACH_CATALOGUE_TEMPLATES"
    WHERE "ID" = p_template_id;

    -- 如果存在父模板，递归获取继承权限
    IF v_parent_id IS NOT NULL THEN
        -- 递归调用自身获取父模板的继承权限
        CALL "SP_CALCULATE_INHERITED_PERMISSIONS"(v_parent_id);
        
        -- 获取父模板的直接权限
        FOR v_permission_record IN
            SELECT * FROM "APPATTACH_ATTACH_CATALOGUE_TEMPLATE_PERMISSIONS"
            WHERE "TEMPLATE_ID" = v_parent_id
              AND "IS_ENABLED" = true
              AND "IS_DELETED" = false
        LOOP
            -- 将父模板权限添加到继承权限列表
            v_inherited_permissions := v_inherited_permissions || jsonb_build_object(
                'id', v_permission_record."ID",
                'templateId', v_permission_record."TEMPLATE_ID",
                'permissionType', v_permission_record."PERMISSION_TYPE",
                'action', v_permission_record."ACTION",
                'effect', v_permission_record."EFFECT",
                'inherited', true
            );
        END LOOP;
    END IF;

    -- 更新模板的运行时权限缓存
    UPDATE "APPATTACH_CATALOGUE_TEMPLATES"
    SET "PERMISSIONS" = v_inherited_permissions,
        "RUNTIME_PERMISSION_CONTEXT" = jsonb_build_object(
            'inheritedPermissions', v_inherited_permissions,
            'calculatedAt', now(),
            'templateId', p_template_id
        )
    WHERE "ID" = p_template_id;
END;
$$;

-- 添加存储过程注释
COMMENT ON PROCEDURE "SP_CALCULATE_INHERITED_PERMISSIONS" IS '权限继承计算存储过程 - 递归计算模板的继承权限';

-- =====================================================
-- 迁移完成
-- =====================================================

SELECT '权限系统数据库迁移完成！' AS "MIGRATION_STATUS";

-- 显示创建的对象
SELECT 
    schemaname,
    tablename,
    tableowner
FROM pg_tables 
WHERE schemaname = 'public' 
  AND tablename LIKE 'APPATTACH%'
ORDER BY tablename;

-- 显示创建的索引
SELECT 
    schemaname,
    tablename,
    indexname,
    indexdef
FROM pg_indexes 
WHERE schemaname = 'public' 
  AND tablename LIKE 'APPATTACH%'
ORDER BY tablename, indexname;

-- 显示创建的视图
SELECT 
    schemaname,
    viewname,
    definition
FROM pg_views 
WHERE schemaname = 'public' 
  AND viewname LIKE 'V_APPATTACH%'
ORDER BY viewname;

-- 显示创建的函数
SELECT 
    n.nspname AS schema_name,
    p.proname AS function_name,
    pg_get_function_identity_arguments(p.oid) AS arguments
FROM pg_proc p
JOIN pg_namespace n ON p.pronamespace = n.oid
WHERE n.nspname = 'public' 
  AND p.proname LIKE 'FN_%'
ORDER BY p.proname;
